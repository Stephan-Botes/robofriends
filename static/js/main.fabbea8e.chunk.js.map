{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","padding","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uOAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,WACzD,gCACI,6BAAKJ,IACL,4BAAIC,WCkBLI,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OAEI,aADA,CACA,qBAGQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,OAHZQ,SCClBC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKT,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEXI,G,MATA,SAACC,GAEZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,QAASC,QAAS,UAA5D,SACKJ,EAAMK,aCiBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,6DAEJG,KAAKX,MAAMK,a,GAhBCQ,IAAMC,WC2DlBC,E,kDArDX,aAAe,IAAD,8BAEV,gBAkBJC,eAAiB,SAACC,GAGd,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SAjBzC,EAAKb,MAAQ,CACTjB,OAAQ,GACR4B,YAAa,IARP,E,qDAad,WAAqB,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACtB,OAAQmC,S,oBAU9C,WAAU,IAAD,EACyBd,KAAKJ,MAA5BjB,EADF,EACEA,OAAQ4B,EADV,EACUA,YAETQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAGzD,OAAQvC,EAAOyC,OAIP,sBAAK7C,UAAU,KAAf,UACI,oBAAIA,UAAU,SAAd,yBAEA,cAAC,EAAD,CAAWS,aAAcgB,KAAKK,iBAE9B,cAAC,EAAD,UACI,cAAC,EAAD,UAEI,cAAC,EAAD,CAAU1B,OAAQoC,WAXlC,+C,GAnCMb,IAAMC,WCITkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACL,cAAC,EAAD,IAASC,SAASC,eAAe,SAMrCX,M","file":"static/js/main.fabbea8e.chunk.js","sourcesContent":["import React from 'react'; // React is always required when writing jsx, which is the html like syntax used below\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\nimport {robots} from \"../robots\"; // Can also destructure it below as a prop\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n        // Fragment containing an array entry\r\n        <>\r\n            {\r\n                // Maps through the robot array and assigns the properties\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    // Selects the property of the Scroll object and returns all its children, which in this case is the cardList\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '550px', padding: \"0.2rem\"}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from \"./CardList\";\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops! Something went wrong.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n// Because this has states, its called a smart component\r\nclass App extends React.Component {\r\n    constructor() {\r\n        // Calls the constructor of React.Component, otherwise state cant be used\r\n        super()\r\n        // Defines changeable states of the App component. Because App owns the state, any components that has \"state\",\r\n        // uses the class syntax so they can use the constructor function to create this.state\r\n        // App is the only one that manages state and then pass down the values to the other components\r\n        this.state = {\r\n            robots: [], // runs constructor with an empty array, until componentDidMount() is called\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    // Part of react so arrow functions aren't necessary\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users})) // updates the state to populate \"robots\" with the array of info\r\n    }\r\n\r\n    // This is passed to SearchBox. Everytime a change occurs, it lets App know there is a change which App then updates\r\n    onSearchChange = (event) => {\r\n        // The value if \"this\" is the input, which is the event, not the constructor\r\n        // Using arrow functions however, which makes sure the \"this\" references the constructor's value\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const {robots, searchfield} = this.state\r\n        // The condition that updates the array with the filter given via the searchfield\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n\r\n        return !robots.length ?\r\n            <h1>Loading..</h1> :\r\n            // The changed state of the App is the passed through CardList to update the display to the newly filtered elements\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f2 ma3'>RoboFriends</h1>\r\n                    {/*Links the onSearchChange function to the prop of SearchBox const*/}\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    {/*Wraps the cardList as its child*/}\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            {/*pass the robots array in current state as a prop for CardList*/}\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport { robots } from './robots' // Not using an export default - Destructure the const\r\n\r\nReactDOM.render(\r\n    <App />, document.getElementById('root'));\r\n\r\n//CAN REMOVE BELOW\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}