{"version":3,"sources":["reportWebVitals.js","components/Card/Card.js","components/CardList/CardList.js","components/Searchbox/SearchBox.js","components/Scroll/Scroll.js","components/ErrorBoundary/ErrorBoundary.js","containers/App/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"uLAYeA,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,mCCgBCQ,EArBF,SAACC,GAKV,IAAOC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GAEpB,OAEI,cADA,CACA,OAAKC,UAAU,sDAAf,UAGI,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,gCACI,6BAAKL,IACL,4BAAIC,WCYLK,EAzBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,8BAGQA,EAAOC,KAAI,SAACC,EAAMC,GAMd,OAAO,cAAC,EAAD,CAEHR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCFdC,EAbG,SAAC,GAAmC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC/B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCGXI,EAVA,SAAClB,GACZ,OAGI,aAFA,CAEA,OAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKtB,EAAMuB,YCcJC,E,kDAlBX,WAAYxB,GAAQ,IAAD,8BACf,cAAMA,IACDyB,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAOG,KAAKJ,MAAMC,SACd,uDACAG,KAAK7B,MAAMuB,a,GAfKQ,aC4DbC,G,wDAlDX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAlBzC,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IAJP,E,qDASd,WAAqB,IAAD,OAChBG,MAAM,8CACD7C,MAAK,SAAA8C,GAAQ,OAAIA,EAASC,UAC1B/C,MAAK,SAAAgD,GAAK,OAAI,EAAKX,SAAS,CAACtB,OAAQiC,S,oBAW9C,WACI,MAA8BZ,KAAKJ,MAA5BjB,EAAP,EAAOA,OAAQ2B,EAAf,EAAeA,YAGTO,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASX,EAAYU,kBAGzD,OAAQrC,EAAOuC,OAGP,sBAAK3C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBAEA,cAAC,EAAD,CAAWU,aAAce,KAAKI,iBAG9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQkC,WAVlC,+C,GArCMX,cCAlBiB,IAASC,OACL,8BACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAG5B7D,M","file":"static/js/main.5f7b9612.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\nconst Card = (props) => {\r\n\r\n    // Destructuring the parameter so that only name, email, id is used\r\n    // instead of prop.name, prop.email, prop.id -> can be done in declaration or as a const (See below 2 lines)\r\n    // const Card = ({ name, email, id }) => {\r\n    const {name, email, id} = props;\r\n\r\n    return (\r\n        // tachyons styling added for the whole div\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n            {/*image link + template string + image size set to 200x200*/}\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from \"../Card/Card\";\r\n\r\n// Deconstructed prop (robots)\r\nconst CardList = ({robots}) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                // Maps through the robots and uses indices to display, rather than posting 10 cards\r\n                robots.map((user, i) => {\r\n\r\n                    // A unique key must be given to the items in a list.\r\n                    // The virtual DOM wont be able to know which cards were deleted or changed\r\n                    // and will have to re-render everything, however with the key it only changes\r\n                    // that one specific component, minimizing the work the DOM has to do.\r\n                    return <Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n;\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ( { searchField, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange} // on change event is linked to searchChange property given from App\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        // Makes the div container the scrollable part, instead of the whole page\r\n        // This keeps the searchbox and heading at the top\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ?\r\n            <h1>Something went wrong.</h1> :\r\n            this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, {Component} from 'react';\r\nimport CardList from \"../../components/CardList/CardList\";\r\nimport SearchBox from \"../../components/Searchbox/SearchBox\";\r\nimport Scroll from \"../../components/Scroll/Scroll\";\r\nimport ErrorBoundary from \"../../components/ErrorBoundary/ErrorBoundary\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n    // State is the (object) description of your App. It is able to change values.\r\n    // The array that is displayed below, can be changed depending on the change of the searchfield.\r\n    // States can also be used with functions, not just classes anymore with hooks\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    // Fetch user data from API with App's componentDidMount() lifecycle hook\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    // Function/ Event listener for searchbox change\r\n    // Arrow function must be used with a user defined function. Pre defined functions can use \"this\",\r\n    // but user defined requires the arrow function to have \"this\" refer to that function, where it is used\r\n    onSearchChange = (event) => {\r\n        // Changes the state value of searchfield\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const {robots, searchfield} = this.state;\r\n\r\n        // A filtered list of robots from the searchfield value\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n\r\n        return !robots.length ?\r\n            <h1>Loading..</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    {/*searchChange is linked to the onSearchChange function/ event listener created above*/}\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    {/*User defined component used to wrap other components.\r\n                    The wrapped components are then part of their props.children*/}\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n};\r\n\r\nexport default App;\r\n","import React from 'react'; // Core of package that does the view manipulation\nimport ReactDOM from 'react-dom'; // Used for DOM websites\nimport './index.css'; // Add css for ech specific component - can have multiple css files for multiple components\nimport 'tachyons'; // Library for styling the webpage\nimport reportWebVitals from './reportWebVitals';\nimport App from './containers/App/App';\n\nReactDOM.render(\n    <div>\n        <App/>\n    </div>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}